{"version":3,"file":"auth.js","sourceRoot":"","sources":["../../../src/auth/auth.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAClF,OAAO,EAAE,UAAU,EAAE,EAAE,EAAE,IAAI,EAAE,MAAM,MAAM,CAAC;AAC5C,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAK3C,OAAO,EAAgB,oBAAoB,EAAE,yBAAyB,EAAE,mBAAmB,EAAE,qBAAqB,EAAE,MAAM,cAAc,CAAC;AAEzI;IA8BE,yBACgC,OAAuB,EACN,YAA+C,EACzE,UAAkB,EAC/B,IAAY;QAJtB,iBAqCC;QAjCS,SAAI,GAAJ,IAAI,CAAQ;QAEpB,IAAM,SAAS,GAAG,IAAI,qBAAqB,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;QAC9D,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,iBAAiB,CAAC;YACjC,IAAM,GAAG,GAAG,mBAAmB,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;YACvD,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;QACpB,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC,sBAAsB,CAC/C,SAAS,CAAC,iBAAiB,CACzB,IAAI,UAAU,CAAC,UAAA,UAAU;YACvB,IAAM,WAAW,GAAG,KAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC;YAC7D,MAAM,CAAC,EAAE,WAAW,aAAA,EAAE,CAAC;QACzB,CAAC,CAAC,CACH,CACF,CAAC;QAEF,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC,sBAAsB,CAC1C,SAAS,CAAC,iBAAiB,CACzB,IAAI,UAAU,CAAC,UAAA,UAAU;YACvB,IAAM,WAAW,GAAG,KAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;YAC3D,MAAM,CAAC,EAAE,WAAW,aAAA,EAAE,CAAC;QACzB,CAAC,CAAC,CACH,CACF,CAAC;QAEF,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,UAAA,IAAI;YAC1C,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAA;QAClD,CAAC,CAAC,CAAC,CAAC;QAEJ,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,UAAA,IAAI;YAChD,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAA;QACxD,CAAC,CAAC,CAAC,CAAC;IACN,CAAC;;gBAnEF,UAAU;;;gDA+BN,MAAM,SAAC,oBAAoB;gDAC3B,QAAQ,YAAI,MAAM,SAAC,yBAAyB;gBACZ,MAAM,uBAAtC,MAAM,SAAC,WAAW;gBA1CgB,MAAM;;IA8E7C,sBAAC;CAAA,AArED,IAqEC;SApEY,eAAe","sourcesContent":["import { Injectable, Inject, Optional, NgZone, PLATFORM_ID } from '@angular/core';\nimport { Observable, of, from } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { FirebaseAppConfig, FirebaseOptions } from 'angularfire2';\n\nimport { User, auth } from 'firebase';\n\nimport { FirebaseAuth, FirebaseOptionsToken, FirebaseNameOrConfigToken, _firebaseAppFactory, FirebaseZoneScheduler } from 'angularfire2';\n\n@Injectable()\nexport class AngularFireAuth {\n\n  /**\n   * Firebase Auth instance\n   */\n  public readonly auth: FirebaseAuth;\n\n  /**\n   * Observable of authentication state; as of Firebase 4.0 this is only triggered via sign-in/out\n   */\n  public readonly authState: Observable<User|null>;\n\n  /**\n   * Observable of the currently signed-in user's JWT token used to identify the user to a Firebase service (or null).\n   */\n  public readonly idToken: Observable<string|null>;\n\n  /**\n   * Observable of the currently signed-in user (or null).\n   */\n  public readonly user: Observable<User|null>;\n\n  /**\n   * Observable of the currently signed-in user's IdTokenResult object which contains the ID token JWT string and other\n   * helper properties for getting different data associated with the token as well as all the decoded payload claims\n   * (or null).\n   */\n  public readonly idTokenResult: Observable<auth.IdTokenResult|null>;\n\n  constructor(\n    @Inject(FirebaseOptionsToken) options:FirebaseOptions,\n    @Optional() @Inject(FirebaseNameOrConfigToken) nameOrConfig:string|FirebaseAppConfig|undefined,\n    @Inject(PLATFORM_ID) platformId: Object,\n    private zone: NgZone\n  ) {\n    const scheduler = new FirebaseZoneScheduler(zone, platformId);\n    this.auth = zone.runOutsideAngular(() => {\n      const app = _firebaseAppFactory(options, nameOrConfig);\n      return app.auth();\n    });\n\n    this.authState = scheduler.keepUnstableUntilFirst(\n      scheduler.runOutsideAngular(\n        new Observable(subscriber => {\n          const unsubscribe = this.auth.onAuthStateChanged(subscriber);\n          return { unsubscribe };\n        })\n      )\n    );\n\n    this.user = scheduler.keepUnstableUntilFirst(\n      scheduler.runOutsideAngular(\n        new Observable(subscriber => {\n          const unsubscribe = this.auth.onIdTokenChanged(subscriber);\n          return { unsubscribe };\n        })\n      )\n    );\n\n    this.idToken = this.user.pipe(switchMap(user => {\n      return user ? from(user.getIdToken()) : of(null)\n    }));\n\n    this.idTokenResult = this.user.pipe(switchMap(user => {\n      return user ? from(user.getIdTokenResult()) : of(null)\n    }));\n  }\n\n}\n"]}