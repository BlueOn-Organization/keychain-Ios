{"version":3,"file":"changes.js","sourceRoot":"","sources":["../../../../src/firestore/collection/changes.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,uBAAuB,CAAC;AAE1D,OAAO,EAAE,GAAG,EAAU,IAAI,EAAE,MAAM,gBAAgB,CAAC;AASnD,MAAM,qBAAwB,KAAY;IACxC,MAAM,CAAC,iBAAiB,CAAC,KAAK,CAAC;SAC5B,IAAI,CACH,GAAG,CAAC,UAAA,MAAM;QACR,OAAA,MAAM,CAAC,OAAO,CAAC,UAAU,EAAE;aACxB,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,CAAC,EAAE,IAAI,EAAE,MAAM,CAAC,IAAI,EAAE,OAAO,EAAE,MAAM,EAA8B,CAAA,EAAnE,CAAmE,CAAC;IADrF,CACqF,CAAC,CAAC,CAAC;AAChG,CAAC;AAMD,MAAM,wBAA2B,KAAY,EAAE,MAA4B;IACzE,MAAM,CAAC,iBAAiB,CAAC,KAAK,CAAC;SAC5B,IAAI,CACH,GAAG,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,OAAO,CAAC,UAAU,EAAE,EAA5B,CAA4B,CAAC,EAC5C,IAAI,CAAC,UAAC,OAAO,EAAE,OAAO,IAAK,OAAA,cAAc,CAAC,OAAO,EAAE,OAAO,EAAE,MAAM,CAAC,EAAxC,CAAwC,EAAE,EAAE,CAAC,EACxE,GAAG,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,OAAO,EAAE,CAAC,EAA8B,CAAA,EAAzD,CAAyD,CAAC,EAA3E,CAA2E,CAAC,CAAC,CAAC;AACnG,CAAC;AASD,MAAM,yBAA4B,OAA4B,EAAE,OAA4B,EAAE,MAA4B;IACxH,OAAO,CAAC,OAAO,CAAC,UAAA,MAAM;QAEpB,EAAE,CAAA,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YACpC,OAAO,GAAG,aAAa,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QAC3C,CAAC;IACH,CAAC,CAAC,CAAC;IACH,MAAM,CAAC,OAAO,CAAC;AACjB,CAAC;AAOD,MAAM,wBAA2B,QAA6B,EAAE,MAAyB;IACvF,MAAM,CAAA,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;QACnB,KAAK,OAAO;YACV,EAAE,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,EAAE,IAAI,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;YAErF,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC;YAC9C,CAAC;YACD,KAAK,CAAC;QACR,KAAK,UAAU;YAGb,EAAE,CAAA,CAAC,MAAM,CAAC,QAAQ,KAAK,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACvC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;gBACpC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC;YAC9C,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC;YAC9C,CAAC;YACD,KAAK,CAAC;QACR,KAAK,SAAS;YACZ,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;YACpC,KAAK,CAAC;IACV,CAAC;IACD,MAAM,CAAC,QAAQ,CAAC;AAClB,CAAC","sourcesContent":["import { fromCollectionRef } from '../observable/fromRef';\nimport { Observable } from 'rxjs';\nimport { map, filter, scan } from 'rxjs/operators';\n\nimport { Query, DocumentChangeType, DocumentChange, DocumentChangeAction, Action } from '../interfaces';\n\n/**\n * Return a stream of document changes on a query. These results are not in sort order but in\n * order of occurence.\n * @param query\n */\nexport function docChanges<T>(query: Query): Observable<DocumentChangeAction<T>[]> {\n  return fromCollectionRef(query)\n    .pipe(\n      map(action =>\n        action.payload.docChanges()\n          .map(change => ({ type: change.type, payload: change } as DocumentChangeAction<T>))));\n}\n\n/**\n * Return a stream of document changes on a query. These results are in sort order.\n * @param query\n */\nexport function sortedChanges<T>(query: Query, events: DocumentChangeType[]): Observable<DocumentChangeAction<T>[]> {\n  return fromCollectionRef(query)\n    .pipe(\n      map(changes => changes.payload.docChanges()),\n      scan((current, changes) => combineChanges(current, changes, events), []),\n      map(changes => changes.map(c => ({ type: c.type, payload: c } as DocumentChangeAction<T>))));\n}\n\n/**\n * Combines the total result set from the current set of changes from an incoming set\n * of changes.\n * @param current\n * @param changes\n * @param events\n */\nexport function combineChanges<T>(current: DocumentChange<T>[], changes: DocumentChange<T>[], events: DocumentChangeType[]) {\n  changes.forEach(change => {\n    // skip unwanted change types\n    if(events.indexOf(change.type) > -1) {\n      current = combineChange(current, change);\n    }\n  });\n  return current;\n}\n\n/**\n * Creates a new sorted array from a new change.\n * @param combined\n * @param change\n */\nexport function combineChange<T>(combined: DocumentChange<T>[], change: DocumentChange<T>): DocumentChange<T>[] {\n  switch(change.type) {\n    case 'added':\n      if (combined[change.newIndex] && combined[change.newIndex].doc.id == change.doc.id) {\n        // Not sure why the duplicates are getting fired\n      } else {\n        combined.splice(change.newIndex, 0, change);\n      }\n      break;\n    case 'modified':\n      // When an item changes position we first remove it\n      // and then add it's new position\n      if(change.oldIndex !== change.newIndex) {\n        combined.splice(change.oldIndex, 1);\n        combined.splice(change.newIndex, 0, change);\n      } else {\n        combined.splice(change.newIndex, 1, change);\n      }\n      break;\n    case 'removed':\n      combined.splice(change.oldIndex, 1);\n      break;\n  }\n  return combined;\n}\n"]}