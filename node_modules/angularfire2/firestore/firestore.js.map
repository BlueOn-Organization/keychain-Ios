{"version":3,"file":"firestore.js","sourceRoot":"","sources":["../../../src/firestore/firestore.ts"],"names":[],"mappings":"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","sourcesContent":["import { InjectionToken, NgZone, PLATFORM_ID, Injectable, Inject, Optional } from '@angular/core';\n\nimport { Observable, of, from } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { firestore } from 'firebase';\n\nimport { Settings, CollectionReference, DocumentReference, QueryFn, AssociatedReference } from './interfaces';\nimport { AngularFirestoreDocument } from './document/document';\nimport { AngularFirestoreCollection } from './collection/collection';\n\nimport { FirebaseFirestore, FirebaseOptions, FirebaseAppConfig, FirebaseOptionsToken, FirebaseNameOrConfigToken, _firebaseAppFactory, FirebaseZoneScheduler } from 'angularfire2';\n\n/**\n * The value of this token determines whether or not the firestore will have persistance enabled\n */\nexport const EnablePersistenceToken = new InjectionToken<boolean>('angularfire2.enableFirestorePersistence');\nexport const FirestoreSettingsToken = new InjectionToken<Settings>('angularfire2.firestore.settings');\n\nexport const DefaultFirestoreSettings = {timestampsInSnapshots: true} as Settings;\n\n/**\n * A utility methods for associating a collection reference with\n * a query.\n *\n * @param collectionRef - A collection reference to query\n * @param queryFn - The callback to create a query\n *\n * Example:\n * const { query, ref } = associateQuery(docRef.collection('items'), ref => {\n *  return ref.where('age', '<', 200);\n * });\n */\nexport function associateQuery(collectionRef: CollectionReference, queryFn = ref => ref): AssociatedReference {\n  const query = queryFn(collectionRef);\n  const ref = collectionRef;\n  return { query, ref };\n}\n\n/**\n * AngularFirestore Service\n *\n * This service is the main entry point for this feature module. It provides\n * an API for creating Collection and Reference services. These services can\n * then be used to do data updates and observable streams of the data.\n *\n * Example:\n *\n * import { Component } from '@angular/core';\n * import { AngularFirestore, AngularFirestoreCollection, AngularFirestoreDocument } from 'angularfire2/firestore';\n * import { Observable } from 'rxjs/Observable';\n * import { from } from 'rxjs/observable/from';\n *\n * @Component({\n *   selector: 'app-my-component',\n *   template: `\n *    <h2>Items for {{ (profile | async)?.name }}\n *    <ul>\n *       <li *ngFor=\"let item of items | async\">{{ item.name }}</li>\n *    </ul>\n *    <div class=\"control-input\">\n *       <input type=\"text\" #itemname />\n *       <button (click)=\"addItem(itemname.value)\">Add Item</button>\n *    </div>\n *   `\n * })\n * export class MyComponent implements OnInit {\n *\n *   // services for data operations and data streaming\n *   private readonly itemsRef: AngularFirestoreCollection<Item>;\n *   private readonly profileRef: AngularFirestoreDocument<Profile>;\n *\n *   // observables for template\n *   items: Observable<Item[]>;\n *   profile: Observable<Profile>;\n *\n *   // inject main service\n *   constructor(private readonly afs: AngularFirestore) {}\n *\n *   ngOnInit() {\n *     this.itemsRef = afs.collection('items', ref => ref.where('user', '==', 'davideast').limit(10));\n *     this.items = this.itemsRef.valueChanges().map(snap => snap.docs.map(data => doc.data()));\n *     // this.items = from(this.itemsRef); // you can also do this with no mapping\n *\n *     this.profileRef = afs.doc('users/davideast');\n *     this.profile = this.profileRef.valueChanges();\n *   }\n *\n *   addItem(name: string) {\n *     const user = 'davideast';\n *     this.itemsRef.add({ name, user });\n *   }\n * }\n */\n@Injectable()\nexport class AngularFirestore {\n  public readonly firestore: FirebaseFirestore;\n  public readonly persistenceEnabled$: Observable<boolean>;\n  public readonly scheduler: FirebaseZoneScheduler;\n\n  /**\n   * Each Feature of AngularFire has a FirebaseApp injected. This way we\n   * don't rely on the main Firebase App instance and we can create named\n   * apps and use multiple apps.\n   * @param app\n   */\n  constructor(\n    @Inject(FirebaseOptionsToken) options:FirebaseOptions,\n    @Optional() @Inject(FirebaseNameOrConfigToken) nameOrConfig:string|FirebaseAppConfig|undefined,\n    @Optional() @Inject(EnablePersistenceToken) shouldEnablePersistence: boolean,\n    @Optional() @Inject(FirestoreSettingsToken) settings: Settings,\n    @Inject(PLATFORM_ID) platformId: Object,\n    zone: NgZone\n  ) {\n    this.scheduler = new FirebaseZoneScheduler(zone, platformId);\n    this.firestore = zone.runOutsideAngular(() => {\n      const app = _firebaseAppFactory(options, nameOrConfig);\n      const firestore = app.firestore();\n      firestore.settings(settings || DefaultFirestoreSettings);\n      return firestore;\n    });\n\n    this.persistenceEnabled$ = zone.runOutsideAngular(() =>\n        shouldEnablePersistence ? from(this.firestore.enablePersistence().then(() => true, () => false))\n                                : of(false)\n      )\n      .pipe(\n        catchError(() => of(false))\n      ); // https://github.com/firebase/firebase-js-sdk/issues/608\n  }\n\n  /**\n   * Create a reference to a Firestore Collection based on a path or\n   * CollectionReference and an optional query function to narrow the result\n   * set.\n   * @param pathOrRef\n   * @param queryFn\n   */\n  collection<T>(path: string, queryFn?: QueryFn): AngularFirestoreCollection<T>\n  collection<T>(ref: CollectionReference, queryFn?: QueryFn): AngularFirestoreCollection<T>\n  collection<T>(pathOrRef: string | CollectionReference, queryFn?: QueryFn): AngularFirestoreCollection<T> {\n    let collectionRef: CollectionReference;\n    if (typeof pathOrRef === 'string') {\n      collectionRef = this.firestore.collection(pathOrRef);\n    } else {\n      collectionRef = pathOrRef;\n    }\n    const { ref, query } = associateQuery(collectionRef, queryFn);\n    return new AngularFirestoreCollection<T>(ref, query, this);\n  }\n\n  /**\n   * Create a reference to a Firestore Document based on a path or\n   * DocumentReference. Note that documents are not queryable because they are\n   * simply objects. However, documents have sub-collections that return a\n   * Collection reference and can be queried.\n   * @param pathOrRef\n   */\n  doc<T>(path: string): AngularFirestoreDocument<T>\n  doc<T>(ref: DocumentReference): AngularFirestoreDocument<T>\n  doc<T>(pathOrRef: string | DocumentReference): AngularFirestoreDocument<T> {\n    let ref: DocumentReference;\n    if (typeof pathOrRef === 'string') {\n      ref = this.firestore.doc(pathOrRef);\n    } else {\n      ref = pathOrRef;\n    }\n    return new AngularFirestoreDocument<T>(ref, this);\n  }\n\n  /**\n   * Returns a generated Firestore Document Id.\n   */\n  createId() {\n    return this.firestore.collection('_').doc().id\n  }\n}\n"]}