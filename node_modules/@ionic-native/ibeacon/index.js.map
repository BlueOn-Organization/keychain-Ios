{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/@ionic-native/plugins/ibeacon/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, Plugin, CordovaCheck, IonicNativePlugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs/Observable';\n\ndeclare const cordova: any;\n\nexport interface Beacon {\n  /**\n   * The physical device's identifier.\n   */\n  uuid: string;\n\n  /**\n   * The beacon's major identifier number.\n   */\n  major: number;\n\n  /**\n   * The beacon's minor identifier number.\n   */\n  minor: number;\n\n  /**\n   * The proximity of the beacon relative to the phone.\n   *\n   * Possible options are:\n   * ProximityImmediate\n   * ProximityNear\n   * ProximityFar\n   * ProximityUnknown\n   */\n  proximity: 'ProximityImmediate' | 'ProximityNear' | 'ProximityFar' | 'ProximityUnknown';\n\n  /**\n   * Transmission Power of the beacon. A constant emitted by the beacon which indicates what's the expected RSSI at a distance of 1 meter to the beacon.\n   */\n  tx: number;\n\n  /**\n   * Received Signal Strength Indicator. The strength of the beacon's signal when it reaches the device.\n   *  RSSI ranges from aprox -26 (a few inches) to -100 (40-50 m distance).\n   */\n  rssi: number;\n\n  /**\n   * The accuracy of the ranging.\n   */\n  accuracy: number;\n\n}\n\nexport interface BeaconRegion {\n  /**\n   * A unique identifier for this region.\n   */\n  identifier: string;\n\n  /**\n   * The the beacon identifier the device will \"watch\" for. Many beacons can share the same uuid.\n   */\n  uuid: string;\n\n  /**\n   * The beacon's major identifier number. Optional, of nothing is supplied\n   * the plugin will treat it as a wildcard.\n   */\n  major?: number;\n\n  /**\n   * The beacon's minor identifier number. Optional, of nothing is supplied\n   * the plugin will treat it as a wildcard.\n   */\n  minor?: number;\n\n  /**\n   * If set to true the device will scan for beacons and determine region state anytime\n   * the device's screen is turned on or off. Useful for debugging.\n   */\n  notifyEntryStateOnDisplay?: boolean;\n}\n\nexport interface CircularRegion {\n  /**\n   * A unique identifier for this region.\n   */\n  identifier: string;\n\n  /**\n   * The latitude of this region.\n   */\n  latitude: number;\n\n  /**\n   * The longitude of this region.\n   */\n  longitude: number;\n\n  /**\n   * The radius of the geofence for this region.\n   */\n  radius: number;\n}\n\nexport type Region = BeaconRegion | CircularRegion;\n\nexport interface IBeaconPluginResult {\n\n  /**\n   * The name of the delegate function that produced the PluginResult object.\n   */\n  eventType: string;\n\n  /**\n   * The region that triggered the event.\n   */\n  region: Region;\n\n  /**\n   * An array of beacon objects\n   */\n  beacons: Beacon[];\n\n  /**\n   * The status of the location permission for iOS.\n   */\n  authorizationStatus: string;\n\n  /**\n   * The state of the phone in relation to the region. Inside/outside for example.\n   */\n  state: 'CLRegionStateInside' | 'CLRegionStateOutside';\n\n  /**\n   * Error message, used only with monitoringDidFailForRegionWithError delegate.\n   */\n  error: string;\n}\n\nexport interface IBeaconDelegate {\n  /**\n   * An observable that publishes information about the location permission authorization status.\n   *\n   * @returns {Observable<string>} Returns a string.\n   */\n  didChangeAuthorizationStatus(): Observable<string>;\n\n  /**\n   * An Observable that publishes event data to it's subscribers\n   * when the native layer is able to determine the device's state.\n   *\n   * This event is called when the phone begins starts monitoring,\n   * when requestStateForRegion is called, etc.\n   *\n   * @returns {Observable<IBeaconPluginResult>} Returns a IBeaconPluginResult object with information about the event, region, and beacon(s).\n   */\n  didDetermineStateForRegion(): Observable<IBeaconPluginResult>;\n\n  /**\n   * An Observable that publishes event data to it's subscribers\n   * when the phone enters a region that it was asked to monitor.\n   *\n   * If the user has given the app Always-Location permission, this function\n   *  will be called even when the app is not running on iOS.\n   * The app will run silently in the background for a small amount of time.\n   *\n   * @returns {Observable<IBeaconPluginResult>} Returns a IBeaconPluginResult object with information about the event, region, and beacon(s).\n   */\n  didEnterRegion(): Observable<IBeaconPluginResult>;\n\n  /**\n   * An Observable that publishes event data to it's subscribers\n   * when the phone exits a region that it was asked to monitor.\n   *\n   * If the user has given the app Always-Location permission, this function\n   *  will be called even when the app is not running on iOS.\n   * The app will run silently in the background for a small amount of time.\n   *\n   * @returns {Observable<IBeaconPluginResult>} Returns a IBeaconPluginResult object with information about the event, region, and beacon(s).\n   */\n  didExitRegion(): Observable<IBeaconPluginResult>;\n\n  /**\n   * An Observable that publishes event data to it's subscribers\n   *  each time that the device ranges beacons. Modern Android and iOS devices range\n   * aproximately once per second.\n   *\n   * @returns {Observable<IBeaconPluginResult>} Returns a IBeaconPluginResult object with information about the event, region, and beacon(s).\n   */\n  didRangeBeaconsInRegion(): Observable<IBeaconPluginResult>;\n\n  /**\n   * An Observable that publishes event data to it's subscribers\n   *  when the device begins monitoring a region.\n   *\n   * @returns {Observable<IBeaconPluginResult>} Returns a IBeaconPluginResult object with information about the event, region, and beacon(s).\n   */\n  didStartMonitoringForRegion(): Observable<IBeaconPluginResult>;\n\n  /**\n   * An Observable that publishes event data to it's subscribers\n   *  when the device fails to monitor a region.\n   *\n   * @returns {Observable<IBeaconPluginResult>} Returns a IBeaconPluginResult object with information about the event, region, and beacon(s).\n   */\n  monitoringDidFailForRegionWithError(): Observable<IBeaconPluginResult>;\n\n  /**\n   * An Observable that publishes event data to it's subscribers\n   *  when the device begins advertising as an iBeacon.\n   *\n   * @returns {Observable<IBeaconPluginResult>} Returns a IBeaconPluginResult object with information about the event, region, and beacon(s).\n   */\n  peripheralManagerDidStartAdvertising(): Observable<IBeaconPluginResult>;\n\n  /**\n   * An Observable that publishes event data to it's subscribers\n   * when the state of the peripheral manager's state updates.\n   *\n   *\n   * @returns {Observable<IBeaconPluginResult>} Returns a IBeaconPluginResult object with information about the event, region, and beacon(s).\n   */\n  peripheralManagerDidUpdateState(): Observable<IBeaconPluginResult>;\n}\n\n/**\n * @name IBeacon\n * @description\n * This plugin provides functions for working with iBeacons.\n *\n *  The plugin's API closely mimics the one exposed through the [CLLocationManager](https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManager_Class/index.html) introduced in iOS 7.\n *\n * @usage\n *\n * ```typescript\n * import { IBeacon } from '@ionic-native/ibeacon';\n *\n * constructor(private ibeacon: IBeacon) { }\n *\n * ...\n *\n *\n * // Request permission to use location on iOS\n * this.ibeacon.requestAlwaysAuthorization();\n * // create a new delegate and register it with the native layer\n * let delegate = this.ibeacon.Delegate();\n *\n * // Subscribe to some of the delegate's event handlers\n * delegate.didRangeBeaconsInRegion()\n *   .subscribe(\n *     data => console.log('didRangeBeaconsInRegion: ', data),\n *     error => console.error()\n *   );\n * delegate.didStartMonitoringForRegion()\n *   .subscribe(\n *     data => console.log('didStartMonitoringForRegion: ', data),\n *     error => console.error()\n *   );\n * delegate.didEnterRegion()\n *   .subscribe(\n *     data => {\n *       console.log('didEnterRegion: ', data);\n *     }\n *   );\n *\n * let beaconRegion = this.ibeacon.BeaconRegion('deskBeacon','F7826DA6-ASDF-ASDF-8024-BC5B71E0893E');\n *\n * this.ibeacon.startMonitoringForRegion(beaconRegion)\n *   .then(\n *     () => console.log('Native layer recieved the request to monitoring'),\n *     error => console.error('Native layer failed to begin monitoring: ', error)\n *   );\n * ```\n * @interfaces\n * Beacon\n * BeaconRegion\n * CircularRegion\n * IBeaconPluginResult\n * IBeaconDelegate\n *\n */\n@Plugin({\n  pluginName: 'IBeacon',\n  plugin: 'cordova-plugin-ibeacon',\n  pluginRef: 'cordova.plugins.locationManager',\n  repo: 'https://github.com/petermetz/cordova-plugin-ibeacon',\n  platforms: ['Android', 'iOS']\n})\n@Injectable()\nexport class IBeacon extends IonicNativePlugin {\n\n  /**\n   * Instances of this class are delegates between the {@link LocationManager} and\n   * the code that consumes the messages generated on in the native layer.\n   *\n   * @returns {IBeaconDelegate} An instance of the type {@type Delegate}.\n   */\n  @CordovaCheck({ sync: true })\n  Delegate(): IBeaconDelegate {\n    let delegate = new cordova.plugins.locationManager.Delegate();\n\n    delegate.didChangeAuthorizationStatus = (pluginResult?: IBeaconPluginResult) => {\n      return new Observable<IBeaconPluginResult>(\n        (observer: any) => {\n          let cb = (data: IBeaconPluginResult) => observer.next(data);\n          return delegate.didChangeAuthorizationStatus = cb;\n        }\n      );\n    };\n\n    delegate.didDetermineStateForRegion = (pluginResult?: IBeaconPluginResult) => {\n      return new Observable<IBeaconPluginResult>(\n        (observer: any) => {\n          let cb = (data: IBeaconPluginResult) => observer.next(data);\n          return delegate.didDetermineStateForRegion = cb;\n        }\n      );\n    };\n\n    delegate.didEnterRegion = (pluginResult?: IBeaconPluginResult) => {\n      return new Observable<IBeaconPluginResult>(\n        (observer: any) => {\n          let cb = (data: IBeaconPluginResult) => observer.next(data);\n          return delegate.didEnterRegion = cb;\n        }\n      );\n    };\n\n    delegate.didExitRegion = (pluginResult?: IBeaconPluginResult) => {\n      return new Observable<IBeaconPluginResult>(\n        (observer: any) => {\n          let cb = (data: IBeaconPluginResult) => observer.next(data);\n          return delegate.didExitRegion = cb;\n        }\n      );\n    };\n\n    delegate.didRangeBeaconsInRegion = (pluginResult?: IBeaconPluginResult) => {\n      return new Observable<IBeaconPluginResult>(\n        (observer: any) => {\n          let cb = (data: IBeaconPluginResult) => observer.next(data);\n          return delegate.didRangeBeaconsInRegion = cb;\n        }\n      );\n    };\n\n    delegate.didStartMonitoringForRegion = (pluginResult?: IBeaconPluginResult) => {\n      return new Observable<IBeaconPluginResult>(\n        (observer: any) => {\n          let cb = (data: IBeaconPluginResult) => observer.next(data);\n          return delegate.didStartMonitoringForRegion = cb;\n        }\n      );\n    };\n\n    delegate.monitoringDidFailForRegionWithError = (pluginResult?: IBeaconPluginResult) => {\n      return new Observable<IBeaconPluginResult>(\n        (observer: any) => {\n          let cb = (data: IBeaconPluginResult) => observer.next(data);\n          return delegate.monitoringDidFailForRegionWithError = cb;\n        }\n      );\n    };\n\n    delegate.peripheralManagerDidStartAdvertising = (pluginResult?: IBeaconPluginResult) => {\n      return new Observable<IBeaconPluginResult>(\n        (observer: any) => {\n          let cb = (data: IBeaconPluginResult) => observer.next(data);\n          return delegate.peripheralManagerDidStartAdvertising = cb;\n        }\n      );\n    };\n\n    delegate.peripheralManagerDidUpdateState = (pluginResult?: IBeaconPluginResult) => {\n      return new Observable<IBeaconPluginResult>(\n        (observer: any) => {\n          let cb = (data: IBeaconPluginResult) => observer.next(data);\n          return delegate.peripheralManagerDidUpdateState = cb;\n        }\n      );\n    };\n\n    cordova.plugins.locationManager.setDelegate(delegate);\n    return delegate;\n  }\n\n  /**\n   * Creates a new BeaconRegion\n   *\n   * @param {String} identifier @see {CLRegion}\n   * @param {String} uuid The proximity ID of the beacon being targeted.\n   * This value must not be blank nor invalid as a UUID.\n   * @param {Number} major The major value that you use to identify one or more beacons.\n   * @param {Number} minor The minor value that you use to identify a specific beacon.\n   * @param {BOOL} notifyEntryStateOnDisplay\n   *\n   * @returns {BeaconRegion} Returns the BeaconRegion that was created\n   */\n  @CordovaCheck({ sync: true })\n  BeaconRegion(identifer: string, uuid: string, major?: number, minor?: number, notifyEntryStateOnDisplay?: boolean): BeaconRegion {\n    return new cordova.plugins.locationManager.BeaconRegion(identifer, uuid, major, minor, notifyEntryStateOnDisplay);\n  }\n\n  /**\n   * @returns {IBeaconDelegate} Returns the IBeaconDelegate\n   */\n  @Cordova()\n  getDelegate(): IBeaconDelegate { return; }\n\n  /**\n   * @param {IBeaconDelegate} delegate An instance of a delegate to register with the native layer.\n   *\n   * @returns {IBeaconDelegate} Returns the IBeaconDelegate\n   */\n  @Cordova()\n  setDelegate(delegate: IBeaconDelegate): IBeaconDelegate { return; }\n\n  /**\n   * Signals the native layer that the client side is ready to consume messages.\n   * Readiness here means that it has a {IBeaconDelegate} set by the consumer javascript\n   * code.\n   *\n   * The {LocationManager.setDelegate()} will implicitly call this method as well,\n   * therefore the only case when you have to call this manually is if you don't\n   * wish to specify a {IBeaconDelegate} of yours.\n   *\n   * The purpose of this signaling mechanism is to make the events work when the\n   * app is being woken up by the Operating System to give it a chance to handle\n   * region monitoring events for example.\n   *\n   * If you don't set a {IBeaconDelegate} and don't call this method manually, an error\n   * message get emitted in the native runtime and the DOM as well after a certain\n   * period of time.\n   *\n   * @returns {Promise<void>} Returns a promise which is resolved as soon as the\n   * native layer acknowledged the request and started to send events.\n   */\n  @Cordova({ otherPromise: true })\n  onDomDelegateReady(): Promise<void> { return; }\n\n  /**\n   * Determines if bluetooth is switched on, according to the native layer.\n   * @returns {Promise<boolean>} Returns a promise which is resolved with a {Boolean}\n   * indicating whether bluetooth is active.\n   */\n  @Cordova({ otherPromise: true })\n  isBluetoothEnabled(): Promise<boolean> { return; }\n\n  /**\n   * Enables Bluetooth using the native Layer. (ANDROID ONLY)\n   *\n   * @returns {Promise<void>} Returns a promise which is resolved when Bluetooth\n   * could be enabled. If not, the promise will be rejected with an error.\n   */\n  @Cordova({ otherPromise: true })\n  enableBluetooth(): Promise<void> { return; }\n\n  /**\n   * Disables Bluetooth using the native Layer. (ANDROID ONLY)\n   *\n   * @returns {Promise<void>} Returns a promise which is resolved when Bluetooth\n   * could be enabled. If not, the promise will be rejected with an error.\n   */\n  @Cordova({ otherPromise: true })\n  disableBluetooth(): Promise<void> { return; }\n\n  /**\n   * Start monitoring the specified region.\n   *\n   * If a region of the same type with the same identifier is already being\n   * monitored for this application,\n   * it will be removed from monitoring. For circular regions, the region\n   * monitoring service will prioritize\n   * regions by their size, favoring smaller regions over larger regions.\n   *\n   * This is done asynchronously and may not be immediately reflected in monitoredRegions.\n   *\n   * @param {Region} region An instance of {Region} which will be monitored\n   * by the operating system.\n   *\n   * @returns {Promise<string>} Returns a promise which is resolved as soon as the\n   * native layer acknowledged the dispatch of the monitoring request.\n   */\n  @Cordova({ otherPromise: true })\n  startMonitoringForRegion(region: Region): Promise<string> { return; }\n\n  /**\n   * Stop monitoring the specified region.  It is valid to call\n   * stopMonitoringForRegion: for a region that was registered for monitoring\n   * with a different location manager object, during this or previous\n   * launches of your application.\n   *\n   * This is done asynchronously and may not be immediately reflected in monitoredRegions.\n   *\n   * @param {Region} region An instance of {Region} which will be monitored\n   * by the operating system.\n   *\n   * @returns {Promise<void>} Returns a promise which is resolved as soon as the\n   * native layer acknowledged the dispatch of the request to stop monitoring.\n   */\n  @Cordova({ otherPromise: true })\n  stopMonitoringForRegion(region: Region): Promise<void> { return; }\n\n  /**\n   * Request state the for specified region. When result is ready\n   * didDetermineStateForRegion is triggered. This can be any region,\n   * also those which is not currently monitored.\n   *\n   * This is done asynchronously and may not be immediately reflected in monitoredRegions.\n   *\n   * @param {Region} region An instance of {Region} which will be monitored\n   * by the operating system.\n   *\n   * @returns {Promise<void>} Returns a promise which is resolved as soon as the\n   * native layer acknowledged the dispatch of the request to stop monitoring.\n   */\n  @Cordova({ otherPromise: true })\n  requestStateForRegion(region: Region): Promise<void> { return; }\n\n\n  /**\n   * Start ranging the specified beacon region.\n   *\n   * If a region of the same type with the same identifier is already being\n   * monitored for this application, it will be removed from monitoring.\n   *\n   * This is done asynchronously and may not be immediately reflected in rangedRegions.\n   *\n   * @param {Region} region An instance of {BeaconRegion} which will be monitored\n   * by the operating system.\n   *\n   * @returns {Promise<void>} Returns a promise which is resolved as soon as the\n   * native layer acknowledged the dispatch of the monitoring request.\n   */\n  @Cordova({ otherPromise: true })\n  startRangingBeaconsInRegion(region: Region): Promise<void> { return; }\n\n  /**\n   * Stop ranging the specified region.  It is valid to call\n   * stopMonitoringForRegion: for a region that was registered for ranging\n   * with a different location manager object, during this or previous\n   * launches of your application.\n   *\n   * This is done asynchronously and may not be immediately reflected in rangedRegions.\n   *\n   * @param {Region} region An instance of {BeaconRegion} which will be monitored\n   * by the operating system.\n   *\n   * @returns {Promise<void>} Returns a promise which is resolved as soon as the\n   * native layer acknowledged the dispatch of the request to stop monitoring.\n   */\n  @Cordova({ otherPromise: true })\n  stopRangingBeaconsInRegion(region: Region): Promise<void> { return; }\n\n  /**\n   * Queries the native layer to determine the current authorization in effect.\n   *\n   * @returns {Promise<IBeaconPluginResult>} Returns a promise which is resolved with the\n   * requested authorization status.\n   */\n  @Cordova({ otherPromise: true })\n  getAuthorizationStatus(): Promise<IBeaconPluginResult> { return; }\n\n  /**\n   * For iOS 8 and above only. The permission model has changed by Apple in iOS 8, making it necessary for apps to\n   * explicitly request permissions via methods like these:\n   * <a href=\"https://developer.apple.com/library/prerelease/iOS/documentation/CoreLocation/Reference/CLLocationManager_Class/index.html#//apple_ref/occ/instm/CLLocationManager/requestWhenInUseAuthorization\">requestWhenInUseAuthorization</a>\n   * <a href=\"https://developer.apple.com/library/prerelease/iOS/documentation/CoreLocation/Reference/CLLocationManager_Class/index.html#//apple_ref/occ/instm/CLLocationManager/requestAlwaysAuthorization\">requestAlwaysAuthorization</a>\n   *\n   * If you are using this plugin on Android devices only, you will never have to use this, nor {@code requestAlwaysAuthorization}\n   * @returns {Promise<void>} Returns a promise that is resolved when the request dialog is shown.\n   */\n  @Cordova({ otherPromise: true })\n  requestWhenInUseAuthorization(): Promise<void> { return; }\n\n\n  /**\n   * See the documentation of {@code requestWhenInUseAuthorization} for further details.\n   *\n   * @returns {Promise<void>} Returns a promise which is resolved when the native layer\n   * shows the request dialog.\n   */\n  @Cordova({ otherPromise: true })\n  requestAlwaysAuthorization(): Promise<void> { return; }\n\n  /**\n   *\n   * @returns {Promise<Region[]>} Returns a promise which is resolved with an {Array}\n   * of {Region} instances that are being monitored by the native layer.\n   */\n  @Cordova({ otherPromise: true })\n  getMonitoredRegions(): Promise<Region[]> { return; }\n\n  /**\n   *\n   * @returns {Promise<Region[]>} Returns a promise which is resolved with an {Array}\n   * of {Region} instances that are being ranged by the native layer.\n   */\n  @Cordova({ otherPromise: true })\n  getRangedRegions(): Promise<Region[]> { return; }\n\n  /**\n   * Determines if ranging is available or not, according to the native layer.\n   * @returns {Promise<boolean>} Returns a promise which is resolved with a {Boolean}\n   * indicating whether ranging is available or not.\n   */\n  @Cordova({ otherPromise: true })\n  isRangingAvailable(): Promise<boolean> { return; }\n\n  /**\n   * Determines if region type is supported or not, according to the native layer.\n   *\n   * @param {Region} region An instance of {Region} which will be checked\n   * by the operating system.\n   *\n   * @returns {Promise<boolean>} Returns a promise which is resolved with a {Boolean}\n   * indicating whether the region type is supported or not.\n   */\n  @Cordova({ otherPromise: true })\n  isMonitoringAvailableForClass(region: Region): Promise<boolean> { return; }\n\n  /**\n   * Start advertising the specified region.\n   *\n   * If a region a different identifier is already being advertised for\n   * this application, it will be replaced with the new identifier.\n   *\n   * This call will accept a valid beacon even when no BlueTooth is available,\n   * and will start when BlueTooth is powered on. See {IBeaconDelegate.}\n   *\n   * @param {Region} region An instance of {Region} which will be advertised\n   * by the operating system.\n   * @param {Integer} measuredPower: Optional parameter, if left empty, the device will\n   * use it's own default value.\n   *\n   * @returns {Promise<void>} Returns a promise which is resolved as soon as the\n   * native layer acknowledged the dispatch of the advertising request.\n   */\n  @Cordova({ otherPromise: true })\n  startAdvertising(region: Region, measuredPower?: number): Promise<void> { return; }\n\n  /**\n   * Stop advertising as a beacon.\n   *\n   * This is done asynchronously and may not be immediately reflected in isAdvertising.\n   *\n   * @returns {Promise<void>} Returns a promise which is resolved as soon as the\n   * native layer acknowledged the dispatch of the request to stop advertising.\n   */\n  @Cordova({ otherPromise: true })\n  stopAdvertising(region: Region): Promise<void> { return; }\n\n  /**\n   * Determines if advertising is available or not, according to the native layer.\n   * @returns {Promise<void>} Returns a promise which is resolved with a {Boolean}\n   * indicating whether advertising is available or not.\n   */\n  @Cordova({ otherPromise: true })\n  isAdvertisingAvailable(): Promise<boolean> { return; }\n\n  /**\n   * Determines if advertising is currently active, according to the native layer.\n   * @returns {Promise<void>} Returns a promise which is resolved with a {Boolean}\n   * indicating whether advertising is active.\n   */\n  @Cordova({ otherPromise: true })\n  isAdvertising(): Promise<boolean> { return; }\n\n  /**\n   * Disables debug logging in the native layer. Use this method if you want\n   * to prevent this plugin from writing to the device logs.\n   *\n   * @returns {Promise<void>} Returns a promise which is resolved as soon as the\n   * native layer has set the logging level accordingly.\n   */\n  @Cordova({ otherPromise: true })\n  disableDebugLogs(): Promise<void> { return; }\n\n  /**\n   * Enables the posting of debug notifications in the native layer. Use this method if you want\n   * to allow the plugin the posting local notifications.\n   * This can be very helpful when debugging how to apps behave when launched into the background.\n   *\n   * @returns {Promise<void>} Returns a promise which is resolved as soon as the\n   * native layer has set the flag to enabled.\n   */\n  @Cordova({ otherPromise: true })\n  enableDebugNotifications(): Promise<void> { return; }\n\n  /**\n   * Disables the posting of debug notifications in the native layer. Use this method if you want\n   * to prevent the plugin from posting local notifications.\n   *\n   * @returns {Promise<void>} Returns a promise which is resolved as soon as the\n   * native layer has set the flag to disabled.\n   */\n  @Cordova({ otherPromise: true })\n  disableDebugNotifications(): Promise<void> { return; }\n\n  /**\n   * Enables debug logging in the native layer. Use this method if you want\n   * a debug the inner workings of this plugin.\n   *\n   * @returns {Promise<void>} Returns a promise which is resolved as soon as the\n   * native layer has set the logging level accordingly.\n   */\n  @Cordova({ otherPromise: true })\n  enableDebugLogs(): Promise<void> { return; }\n\n  /**\n   * Appends the provided [message] to the device logs.\n   * Note: If debug logging is turned off, this won't do anything.\n   *\n   * @param {String} message The message to append to the device logs.\n   *\n   * @returns {Promise<void>} Returns a promise which is resolved with the log\n   * message received by the native layer for appending. The returned message\n   * is expected to be equivalent to the one provided in the original call.\n   */\n  @Cordova({ otherPromise: true })\n  appendToDeviceLog(message: string): Promise<void> { return; }\n\n}\n"]}